package main

import (
    "log"
    "github.com/gofiber/fiber/v2"
    "github.com/gofiber/websocket/v2"
)

func caesarCipher(input string, shift int) string {
    shift = shift % 26
    shifted := make([]byte, len(input))
    for i, char := range []byte(input) {
        if char >= 'a' && char <= 'z' {
            shifted[i] = 'a' + (char-'a'+byte(shift)+26)%26
        } else if char >= 'A' && char <= 'Z' {
            shifted[i] = 'A' + (char-'A'+byte(shift)+26)%26
        } else {
            shifted[i] = char
        }
    }
    return string(shifted)
}

func main() {
    app := fiber.New()

    app.Static("/", "./public")

    app.Get("/ws", websocket.New(func(c *websocket.Conn) {
        defer c.Close()
        for {
            mt, msg, err := c.ReadMessage()
            if err != nil {
                log.Println("read:", err)
                break
            }
            decrypted := caesarCipher(string(msg), -3)
            log.Printf("recv: %s", decrypted)
            encryptedMsg := caesarCipher(decrypted, 3)
            if err = c.WriteMessage(mt, []byte(encryptedMsg)); err != nil {
                log.Println("write:", err)
                break
            }
        }
    }))

    log.Fatal(app.Listen("0.0.0.0:3000"))
}
